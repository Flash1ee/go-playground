version: '3.5'

services:
  app:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    expose:
      - "80"
    ports:
      - "81:80"
    volumes:
      - ./app.toml:/app/app.toml
      - ${CONFIG_DIR}:/app/configs
    depends_on:
      - mongodb
    networks:
      - mongo-network
  mongodb:
    container_name: mongodb
    image: "mongo:4.4.2"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_DB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_DB_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
    ports:
      - '27100:27017'
    volumes:
      - "mongodata:/data/db"
      - "./migrations:/migrations"
      - "./rs-init.sh:/scripts/rs-init.sh"
      - ${CONFIG_DIR}:/app/configs
    healthcheck:
      test: "echo 'db.runCommand(\"ping\").ok'"
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - mongo-network
    command: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
  mongodb2:
    container_name: mongodb2
    image: "mongo:4.4.2"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_DB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_DB_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
    ports:
      - '27101:27017'
    volumes:
      - "mongodata2:/data/db"
      - "./migrations:/migrations"
      - ${CONFIG_DIR}:/app/configs
    healthcheck:
      test: "echo 'db.runCommand(\"ping\").ok'"
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - mongo-network
    command: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]



volumes:
  mongodata:
  mongodata2:

networks:
  mongo-network:
    driver: bridge